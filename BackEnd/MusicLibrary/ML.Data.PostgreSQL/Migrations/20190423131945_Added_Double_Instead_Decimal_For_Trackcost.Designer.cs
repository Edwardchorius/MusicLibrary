// <auto-generated />
using System;
using ML.Data.PostgreSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ML.Data.PostgreSQL.Migrations
{
    [DbContext(typeof(PostgreSQLDataContext))]
    [Migration("20190423131945_Added_Double_Instead_Decimal_For_Trackcost")]
    partial class Added_Double_Instead_Decimal_For_Trackcost
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:HiLoSequenceName", "EntityFrameworkHiLoSequence")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SequenceHiLo)
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.EntityFrameworkHiLoSequence", "'EntityFrameworkHiLoSequence', '', '1', '10', '', '', 'Int64', 'False'");

            modelBuilder.Entity("ML.Data.Models.PlayList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Duration");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("PlayLists");
                });

            modelBuilder.Entity("ML.Data.Models.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author")
                        .IsRequired();

                    b.Property<double>("Cost");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<int>("Duration");

                    b.Property<int>("Genre");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Performer")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("ML.Data.Models.TracksPlayLists", b =>
                {
                    b.Property<int>("TrackId");

                    b.Property<int>("PlayListId");

                    b.HasKey("TrackId", "PlayListId");

                    b.HasIndex("PlayListId");

                    b.ToTable("TracksPlayLists");
                });

            modelBuilder.Entity("ML.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Username");

                    b.Property<int>("WalletId");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ML.Data.Models.UsersTracks", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("TrackId");

                    b.HasKey("UserId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("UsersTracks");
                });

            modelBuilder.Entity("ML.Data.Models.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Balance");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("Currency");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("ML.Data.Models.PlayList", b =>
                {
                    b.HasOne("ML.Data.Models.User", "Owner")
                        .WithMany("PlayLists")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ML.Data.Models.Track", b =>
                {
                    b.HasOne("ML.Data.Models.User")
                        .WithMany("Tracks")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ML.Data.Models.TracksPlayLists", b =>
                {
                    b.HasOne("ML.Data.Models.PlayList", "PlayList")
                        .WithMany("TracksPlayLists")
                        .HasForeignKey("PlayListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ML.Data.Models.Track", "Track")
                        .WithMany("TracksPlayLists")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ML.Data.Models.UsersTracks", b =>
                {
                    b.HasOne("ML.Data.Models.Track", "Track")
                        .WithMany("UsersTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ML.Data.Models.User", "User")
                        .WithMany("UsersTracks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ML.Data.Models.Wallet", b =>
                {
                    b.HasOne("ML.Data.Models.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("ML.Data.Models.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
